1、创建类，在类里面定义方法
    //被增强类
    public class User {
        public void add(){
            System.out.println("user add...");
        }
    }
2、创建增强类（编写增强逻辑）
    （1）在增强类里面，创建方法，让不同方法代表不同通知类型
        //增强类
        public class UserProxy {

            //前置通知
            public void before(){
                System.out.println("before...");
            }
        }
3、进行通知的配置
    （1）在spring配置文件中，开启注解扫描
        <?xml version="1.0" encoding="UTF-8"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:context="http://www.springframework.org/schema/context"
               xmlns:aop="http://www.springframework.org/schema/context"
               xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
            <!--开启组件扫描
                1.如果扫描多个包，用逗号隔开
                2.扫描公共的上层目录
            -->
            <context:component-scan base-package="com.company.spring.aopanno"></context:component-scan>
    （2）使用注解创建User和UserProxy对象
    （3）在增强类上面添加注解 @Aspect
    （4）在spring配置文件中开启生成代理对象
        <!--开启aspectj的生成代理的对象-->
        <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
4、配置不同类型的通知
    （1）在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置
        //增强类
        @Component
        @Aspect
        public class UserProxy {

            //前置通知
            @Before(value = "execution(* com.company.spring.aopanno.User.add(..))")
            public void before(){
                System.out.println("before...");
            }
            //后置通知（返回通知）
            @AfterReturning(value = "execution(* com.company.spring.aopanno.User.add(..))")
            public void afterReturning(){
                System.out.println("afterReturning.........");
            }
            //最终通知
            @After(value = "execution(* com.company.spring.aopanno.User.add(..))")
            public void after() {
                System.out.println("after.........");
            }
            //异常通知
            @AfterThrowing(value = "execution(* com.company.spring.aopanno.User.add(..))")
            public void afterThrowing() {
                System.out.println("afterThrowing.........");
            }
            //环绕通知
            @Around(value = "execution(* com.company.spring.aopanno.User.add(..))")
            public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
                System.out.println("环绕之前.........");
                //被增强的方法执行
                proceedingJoinPoint.proceed();
                System.out.println("环绕之后.........");
            }
        }
######################################################################################################################
5、相同的切入点抽取