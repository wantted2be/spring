1、AOP底层使用动态代理
    （1）有两种情况动态代理
        第一种 有接口情况，使用JDK动态代理
            ⚫ 创建接口实现类代理对象，增强类的方法
        第二种 没有接口情况，使用CGLIB动态代理
            ⚫ 创建子类的代理对象，增强类的方法
##################################################################################################################
1、使用JDK动态代理，使用Proxy类里面的方法创建代理对象
    （1）调用newProxyInstance方法
        方法有三个参数：
        第一参数，类加载器
        第二参数，增强方法所在的类，这个类实现的接口，支持多个接口
        第三参数，实现这个接口InvocationHandler，创建代理对象，写增强的部分
2、编写JDK动态代理代码
    （1）创建接口，定义方法
        public interface UserDao {
            public int add(int a, int b);
            public String update(String id);
        }
    （2）创建接口实现类，实现方法
        public class UserDaoImpl implements UserDao{
            @Override
            public int add(int a, int b) {
                System.out.println("add ...");
                return a + b;
            }

            @Override
            public String update(String id) {
                System.out.println("update");
                return id;
            }
        }
    （3）使用Proxy类创建接口代理对象
        public class JDKProxy {
            public static void main(String[] args) {
        //        //创建接口实现类的代理对象
        //        Class[] interfaces = {UserDao.class};
        //        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() {
        //            @Override
        //            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //                return null;
        //            }
        //        })

                //创建接口实现类的代理对象
                Class[] interfaces = {UserDao.class};
                UserDaoImpl userDaoImpl = new UserDaoImpl();
                UserDao userDao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,new UserDaoProxy(userDaoImpl));
                int result = userDao.add(1,2);
                System.out.println(result);
            }
        }

        //创建代理对象代码
        class UserDaoProxy implements InvocationHandler{

            //1.创建谁的代理对象，就要传递谁
            //有参数构造函数
            private Object object;
            public UserDaoProxy(Object object){
                this.object = object;
            }

            //增强的逻辑在这个地方写
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                //方法之前做个处理
                System.out.println("方法之前执行..." + method.getName() + ":传递参数" + Arrays.toString(args));

                //被增强的方法执行
                Object res = method.invoke(object,args);

                //方法之后
                System.out.println("方法执行之后" + object);
                return res;
            }
        }
##################################################################################################################
AOP术语
    1.连接点
        类里面哪些方法可以被增强，这些方法被称为连接点
    2.切入点
        实际真正被增强的方法，称为切入点
    3.通知（增强）
        （1）实际增强的逻辑部分称为通知（增强）
        （2）通知有多种类型
            前置通知，后置通知，环绕通知，异常通知，最终通知
    4.切面
        是动作，把通知应用到切入点的过程
##################################################################################################################
AOP操作的准备工作
1、Spring框架一般都是基于AspectJ实现AOP操作
    （1）AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spirng框架一起使用，进行AOP操作
2、基于AspectJ实现AOP操作
    （1）基于xml配置文件实现
    （2）基于注解方式实现（使用）
3、在项目工程里面引入AOP相关依赖

4、切入点表达式
    （1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强
    （2）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )
        举例1：对com.atguigu.dao.BookDao类里面的add进行增强
            execution(* com.atguigu.dao.BookDao.add(..))
        举例2：对com.atguigu.dao.BookDao类里面的所有的方法进行增强
            execution(* com.atguigu.dao.BookDao.* (..))
        举例3：对com.atguigu.dao包里面所有类，类里面所有方法进行增强
            execution(* com.atguigu.dao.*.* (..))


