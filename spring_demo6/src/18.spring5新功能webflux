#1.SpringWebflux介绍
###1.1 是Spring5添加新的模块，用于web开发的，功能和SpringMVC类似的，Webflux使用当前一种比较流程响应式编程出现的框架。  
###1.2使用传统web框架，比如SpringMVC，这些基于Servlet容器，Webflux是一种异步非阻塞的框架，异步非阻塞的框架在Servlet3.1以后才支持，核心是基于Reactor的相关API实现的。  
###1.3解释什么是异步非阻塞  
* 异步和同步
* 非阻塞和阻塞
    * 上面都是针对对象不一样
    * 异步和同步针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步
    * 阻塞和非阻塞针对被调用者，被调用者受到请求之后，做完请求任务之后才给出反馈就是阻塞，受到请求之后马上给出反馈然后再去做事情就是非阻塞  
###1.4Webflux特点：
* 非阻塞式：在有限资源下，提高系统吞吐量和伸缩性，以Reactor为基础实现响应式编程
* 函数式编程：Spring5框架基于java8，Webflux使用Java8函数式编程方式实现路由请求
###1.5 比较SpringMVC
![](.18.spring5新功能webflux_images/712978c9.png)
* 两个框架都可以使用注解方式，都运行在Tomet等容器中
* SpringMVC采用命令式编程，Webflux采用异步响应式编程
#2.响应式编程（Java实现）
###2.1 什么是响应式编程 
响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。 电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似"=B1+C1"的公式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。
###2.2Java8及其之前版本
提供的观察者模式两个类Observer和Observable 
```java
public class ObserverDemo extends Observable { 
    public static void main(String[] args) { 
        ObserverDemo observer = new ObserverDemo(); 
        //添加观察者 
        observer.addObserver((o,arg)->{ System.out.println("发生变化"); }); 
        observer.addObserver((o,arg)->{ System.out.println("手动被观察者通知，准备改变"); }); 
        observer.setChanged();//数据变化 
        observer.notifyObservers();//通知 
    } 
}
```
#3.响应式编程（Reactor实现）
###3.1 响应式编程操作中，Reactor是满足Reactive规范框架
###3.2 Reactor有两个核心类，Mono和Flux，这两个类实现接口Publisher，提供丰富操作符。Flux对象实现发布者，返回N个元素；Mono实现发布者，返回0或者1个元素 
###3.3 Flux和Mono都是数据流的发布者
![](.18.spring5新功能webflux_images/0258b0ec.png)
使用Flux和Mono都可以发出三种数据信号： 元素值，错误信号，完成信号，错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者
###3.4 代码演示 Flux和Mono
###3.5 三种信号特点
* 错误信号和完成信号都是终止信号，不能共存的
* 如果没有发送任何元素值，而是直接发送错误或者完成信号，表示是空数据流
* 如果没有错误信号，没有完成信号，表示是无限数据流
###3.6 调用just或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生的
###3.7 操作符
* 对数据流进行一道道操作，成为操作符，比如工厂流水线
  第一 map 元素映射为新元素
  第二 flatMap 元素映射为流
  ⚫ 把每个元素转换流，把转换之后多个流合并大的流
#4.SpringWebflux执行流程和核心API
SpringWebflux基于Reactor，默认使用容器是Netty，Netty是高性能的NIO框架，异步非阻塞的框架
#5.SpringWebflux（基于注解编程模型）
  SpringWebflux实现方式有两种：注解编程模型和函数式编程模型
  使用注解编程模型方式，和之前SpringMVC使用相似的，只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用Netty服务器
  第一步 创建SpringBoot工程，引入Webflux依赖
  第二步 配置启动端口号
  第三
#6.SpringWebflux（基于函数式编程模型）
  （1）在使用函数式编程模型操作时候，需要自己初始化服务器
  （2）基于函数式编程模型时候，有两个核心接口：RouterFunction（实现路由功能，请求转发给对应的handler）和HandlerFunction（处理请求生成响应的函数）。核心任务定义两个函数式接口的实现并且启动需要的服务器。
  （3）SpringWebflux请求和响应不再是ServletRequest和ServletResponse，而是ServerRequest和ServerResponse
  第一步 把注解编程模型工程复制一份 ，保留entity和service内容
  第二步 创建Handler（具体实现方法）